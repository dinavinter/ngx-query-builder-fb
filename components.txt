{name:app, file: ./src/app/app.component.ts}
{name:hello, file: ./src/app/hello.component.ts}
{name:landing, file: ./src/app/landing/landing.component.ts}
{name:ng-query-builder-console, file: ./src/app/ng-query-builder-console/ng-query-builder-console.component.ts}
{name:ngx-query-fb, file: ./src/app/ngx-query-fb/ngx-query-fb.component.ts}
./src/app/app.component.ts:'import { Component,  } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {

  public title = 'NGX Query Builder w/t Fundamental NGX';

}'
./src/app/hello.component.ts:'import { Component, Input } from '@angular/core';

@Component({
  selector: 'hello',
  template: `<h1>Hello {{name}}!</h1>`,
  styles: [`h1 { font-family: Lato; }`]
})
export class HelloComponent  {
  @Input() name: string;
}'
./src/app/landing/landing.component.ts:'import { Component } from '@angular/core';

@Component({
  selector: 'landing',
  templateUrl: './landing.component.html',
  styleUrls: ['./landing.component.scss']
})
export class LandingComponent {
  
}'
./src/app/ng-query-builder-console/ng-query-builder-console.component.ts:'import { Component, Input, OnInit } from '@angular/core';
import { QueryBuilderConfig } from 'ngx-angular-query-builder';

@Component({
  selector: 'app-ng-query-builder-console',
  templateUrl: './ng-query-builder-console.component.html',
  styleUrls: ['./ng-query-builder-console.component.scss']
})
export class NgQueryBuilderConsoleComponent implements OnInit {
  ngOnInit(): void {
  }

  @Input() isDisabled= false;
  dirty=true;

  @Input() query = {
    root: true,
    condition: 'and',
    rules: [
      {
        condition: 'or',
        rules: [
          { field: 'age', operator: '=', value: 4 },
          { field: 'age', operator: '>', value: 20 },
        ],
      },
      {
        condition: 'and',
        rules: [{ field: 'gender', operator: '=', value: 'f' }],
      },
    ],
  };

  @Input() config: QueryBuilderConfig = {
    fields: {
      age: { name: 'Age', type: 'number' },
      gender: {
        name: 'Gender',
        type: 'category',
        options: [
          { name: 'Male', value: '' },
          { name: 'Female', value: 'f' },
        ],
      },
      foo: {
        name: 'Foo',
        type: 'object',
        operators: ['between', 'less', 'bigger'],
        defaultValue: [],
      },
    },
  };

  onQueryBuilderChange($event) {
    console.log($event);
  }

  log(event?: any): void {
    console.log(event);
  }
  initRules():void{

  }
  onSetFilterCriteria():void{
    
  }
}'
./src/app/ngx-query-fb/ngx-query-fb.component.ts:'import { Component, Input, OnInit } from '@angular/core';
import { QueryBuilderConfig,Rule,RuleSet,QueryBuilderClassNames } from 'ngx-angular-query-builder';

@Component({
  selector: 'app-ngx-query-fb',
  templateUrl: './ngx-query-fb.component.html',
  styleUrls: ['./ngx-query-fb.component.scss']
})
export class NgxQueryFbComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  @Input() classNames: QueryBuilderClassNames = {
    removeButton: "fd-button fd-button--transparent is-cozy",
    removeIcon:"fd-icon sap-icon--delete",
  };
  
    @Input() query = {
      root: true,
      condition: 'and',
      rules: [
        {
          condition: 'and',
          rules: [AllAccountsRule],
        },
      ],
    };
  
    @Input() config: QueryBuilderConfig = {
      addRuleSet: this.addRuleSet.bind(this),
      removeRule:this.removeRule.bind(this),
      fields: {
        age: { name: 'Age', type: 'number' },
        gender: {
          name: 'Gender',
          type: 'category',
          options: [
            { name: 'Male', value: '' },
            { name: 'Female', value: 'f' },
          ],
        },
        foo: {
          name: 'Foo',
          type: 'object',
          operators: ['between', 'less', 'bigger'],
          defaultValue: [],
        },
        UID: {
          name: 'uid',
          type: 'all-accounts',
          operators: ['is not null'],
          defaultOperator: 'is not null',
        },
      },
    };
  
  
    onQueryBuilderChange($event) {
      console.log($event);
    }
  
    log(event?: any): void {
      console.log(event);
    }
  
    addRuleSet(parent?: RuleSet): void {
      parent.rules = parent.rules.concat([
        {
          condition: 'and',
          rules: [AllAccountsRule],
        },
      ]);
    }
    removeRule(rule: Rule, parent?: RuleSet): void {
      parent.rules = parent.rules = parent.rules.filter((r) => r !== rule);
      if(parent.rules.length === 0)
      {
        this.query.rules = this.query.rules.filter((r) => r !== parent);
      }
    }

  }
  const AllAccountsRule = {
    field: 'UID',
    operator: 'is not null',
  };'
